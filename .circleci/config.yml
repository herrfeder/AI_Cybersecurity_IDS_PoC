version: 2.1

executors:
  python:
    docker:
      - image: cimg/python:3.9.1
  aws:
    docker: 
      - image: amazon/aws-cli
  dockerexe:
    docker:
      - image: circleci/docker


commands:
  aws-install-dependencies:
    description: install necessary utilities for aws client
    steps:  
      - run:
          name: Install dependencies
          command: yum install -y tar gzip curl

  source-venv:
    description: source the python virtual environment
    steps:
       - run:
          name: Source existing environment
          command: source .devops/bin/activate

  destroy-environment:
    description: Destroy AWS EKS resources with specific CIRCE_WORKFLOW_ID.
    parameters:
       when:
        type: string
    steps:
     - run:
         name: Check existence of aws cli and install it
         command: sh scripts/check_aws.sh
         when: << parameters.when >>
     - run:
         name: Destroy backend
         command: aws cloudformation delete-stack --stack-name "udapeople-pods-${CIRCLE_WORKFLOW_ID:0:7}"
         when: << parameters.when >>
     - run:
         name: Destroy frontend
         command: |
           aws s3 rm s3://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7} --recursive
           aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
         when: << parameters.when >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
    steps:
      - run:
          name: Check existence of aws cli and install it
          command: sh scripts/check_aws.sh
          when: << parameters.when >>
      - run:
          working_directory: ./backend
          command: |
            export TYPEORM_HOST=$(cat ../.circleci/ansible/backend_ip)
            SUCCESS=$(curl -H "token: 59b634f0-5d93-44a8-8147-ece659e04d52" --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if [[ "$SUCCESS" == "true" ]]
            then
              npm run migrations:revert
            fi
          when: << parameters.when >>            

jobs:

  prepare-env-app:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Create Virtual Env and source Env
          command: |
            make setup
      - source-venv
      - run:
          name: Install app and dev dependencies
          command: |
            make devinstall
      - persist_to_workspace:
          root: .
          paths:
            - .devops

  lint-app:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - source-venv
      - run:
          name: Linting Green Deployment Source
          command: |
            make sourcelint


  test-static-app:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - source-venv
      - run:
          name: Linting Green Deployment Source
          command: |
            make test

  scan-app:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - source-venv
      - run:
          name: Scanning Green Deployment Source
          command: |
            make staticscan

  lint-dockerfiles:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - source-venv
      - run:
          name: Linting Dockerfiles for broai and zeek container
          command: |
            make dockerlint

  build-upload-container:
    executor: dockerexe
    steps:
      - checkout
      - attach_workspace:
          at: .
      - source-venv
      - run:
          name: Linting Dockerfiles for broai and zeek container
          command: |
            deploy/run_compose.sh kafka build
            deploy/upload_docker.sh



  cleanup:
    executor: aws
    steps:
      - checkout
      - aws-install-dependencies
      - run:
          name: Get current stack workflow id
          command: |
            export CurrentWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            export S3_BUCKETS=($(aws s3 ls | cut -d" " -f3)) 
            
            echo "${S3_BUCKETS[@]}"
            echo "${STACKS[@]}"
            echo "$CurrentWorkflowID"
 
      - run:
          name: Remove old stacks and files
          command: |
            # empty all S3 Buckets that aren't tagged with current WorkflowID
            for s3 in ${S3_BUCKETS[@]}; do 
              if [[ ! "$s3" =~ "$CurrentWorkflowID" ]]; 
                then
                  echo "Removing Bucket $s3"
                  aws s3 rm "s3://$s3" --recursive
              fi
            done
            # delete all stacks that aren't tagged with current WorkflowID
            for stack in ${STACKS[@]}; do 
              if [[ ! "$stack" =~ "${CurrentWorkflowID}" ]]
                then
                  echo "Removing Stack $stack"
                  aws cloudformation delete-stack --stack-name "$stack"
                fi
            done
            
workflows:
  default:
    jobs:
      - prepare-env-app
      - lint-app:
          requires: [prepare-env-app]
      - test-static-app:
          requires: [prepare-env-app]
      - scan-app:
          requires: [prepare-env-app]
      - lint-dockerfiles:
          requires: [prepare-env-app]
      - build-upload-container:
          requires: [lint-dockerfiles]
          context:
            - dockerhub   
      #- prep-infrastructure-green-aws:
      #    requires: [lint-app, test-static-app, scan-app]
      #    context:
      #      - aws_vars
      #    filters:
      #      branches:
      #        only:
      #           - main 
      #- deploy-infrastructure-green:
      #    requires: [prep-infrastructure-blue-green-aws]
      #    context:
      #      - aws_vars
      #    filters:
      #      branches:
      #        only:
      #            - master
      #- deploy-infrastructure-blue:
      #    requires: [prep-infrastructure-blue-green-aws]
      #    context:
      #      - aws_vars
      #    filters:
      #      branches:
      #        only:
      #            - master
      #- smoke-test-green-blue:
      #    requires: [deploy-infrastructure-green, deploy-infrastructure-blue]
      #- test-dynamic-app-blue:
      #    requires: [smoke-test-green-blue]
      #    context:
      #      - aws_vars
      #       - udacity_devops_project3
      #- loadbalancer-update:
      #    requires:  [smoke-test]
      #    context:
      #      - aws_vars
      #       - udacity_d evops_project3
      #- cleanup:
      #    requires: [loadbalancer-update]
      #    context:
      #      - aws_vars 
      #      - udacity_devops_project3
