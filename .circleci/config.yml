version: 2.1

executors:
  python:
    docker:
      - image: cimg/python:3.8.0
  aws:
     docker: 
      - image: amazon/aws-cli
  dockerexe:
     docker:
      - image: bayesimpact/circleci
  eks:
    docker:
      - image: bearengineer/awscli-kubectl

commands:
  aws-install-dependencies:
    description: install necessary utilities for aws client
    steps:  
      - run:
          name: Install dependencies
          command: yum install -y tar gzip curl

  source-venv:
    description: source the python virtual environment
    steps:
      - run:
          name: Source existing environment
          command: |
            echo "source .devops/bin/activate" >> $BASH_ENV

  destroy-environment:
    description: Destroy AWS EKS resources with specific CIRCE_WORKFLOW_ID.
    parameters:
       when:
        type: string
    steps:
      - run:
          name: Delete all k8s resources
          command: |
            mkdir .kube
            aws eks --region us-west-2 update-kubeconfig --kubeconfig .kube/config-aws --name AWSK8SCluster
            kubectl --kubeconfig .kube/config-aws delete all --all
          when: << parameters.when >>
      - run:
          name: Check existence of aws cli and install it
          command: sh .circleci/scripts/check_aws.sh
          when: << parameters.when >>
      - run:
          name: Destroy cluster
          command: aws cloudformation delete-stack --stack-name "broaicluster01"
          when: << parameters.when >>
      - run:
          name: Destroy network
          command: |
            aws cloudformation delete-stack --stack-name "broainetwork01"
          when: << parameters.when >>

jobs:

  prepare-env-app:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: 
            - python-env-01
      - run:
          name: Create Virtual Env and source Env
          command: |
            make setup
      - source-venv
      - run:
          name: Install app and dev dependencies
          command: |
            make devinstall

      - save_cache:
          paths: 
            - .devops
          key: python-env-01
      - persist_to_workspace:
          root: .
          paths:
            - .devops

  lint-app:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - source-venv 
      - run:
          name: Linting Green Deployment Source
          command: |
            make sourcelint


  test-static-app:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - source-venv
      - run:
          name: Static App Test
          command: |
            if [[ ${CIRCLE_BRANCH} == david_udacity_project_green ]]
              then
                make statictest
            elif [[ ${CIRCLE_BRANCH} == main ]]
              then
                make statictest
            elif [[ ${CIRCLE_BRANCH} == david_udacity_project_blue ]]
              then
                echo "No test procedures implemented yet"
                exit 0
              fi
  
  scan-app:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - source-venv
      - run:
          name: Scanning Deployment Source
          command: |
            make staticscan

  lint-dockerfiles:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - source-venv
      - run:
          name: Linting Dockerfiles for broai and zeek container
          command: |
            make dockerlint

  build-upload-container:
    executor: dockerexe
    steps:
      - checkout
      - attach_workspace:
          at: .
      - source-venv
      - setup_remote_docker
      - run:
          name: Build application container for zeek and broai and upload to Dockerhub
          command: |
            make buildcontainer
            deploy/upload_docker.sh

  prep-infrastructure-aws:
    executor: aws
    steps:
      - checkout
      - run:
          name: Prepare network for AWS EKS cluster
          working_directory: .circleci
          command: |
            scripts/push_cloudformation_stack.sh broainetwork01 cloudformation/network.yaml ${CIRCLE_WORKFLOW_ID:0:7}
          no_output_timeout: 30m
      - run:
          name: Prepare cluster for AWS EKS cluster
          working_directory: .circleci
          command: |
            scripts/push_cloudformation_stack.sh broaicluster01 cloudformation/cluster.yaml ${CIRCLE_WORKFLOW_ID:0:7} 
          no_output_timeout: 30m
      - destroy-environment:
          when: on_fail 

  deploy-k8-infrastructure:
    executor: eks
    steps:
      - checkout
      - run:
          name: get authentication token for EKS kubernetes cluster and deploy cluster manifests
          working_directory: deploy
          command: |
            mkdir .kube
            aws eks --region us-west-2 update-kubeconfig --kubeconfig .kube/config-aws --name AWSK8SCluster
            sh run_kube_aws.sh
            kubectl --kubeconfig .kube/config-aws get svc
            kubectl --kubeconfig .kube/config-aws get pods
      - destroy-environment:
          when: on_fail 

  loadbalancer-update:
    executor: eks
    steps:
      - checkout
      - run:
          name: Updating the green blue deployment loadbalancer
          working_directory: deploy
          command: |
            mkdir .kube
            aws eks --region us-west-2 update-kubeconfig --kubeconfig .kube/config-aws --name AWSK8SCluster
            if [[ ${CIRCLE_BRANCH} == "david_udacity_project_green" ]]
              then
                kubectl --kubeconfig .kube/config-aws rollout restart deployment broai-green
                kubectl --kubeconfig .kube/config-aws apply -f broai_kubernetes/loadbalancer-aws-service-green-main.yaml
            elif [[ ${CIRCLE_BRANCH} == "david_udacity_project_blue" ]]
              then
                kubectl --kubeconfig .kube/config-aws rollout restart deployment broai-blue
                kubectl --kubeconfig .kube/config-aws apply -f broai_kubernetes/loadbalancer-aws-service-blue-main.yaml
            fi
            kubectl --kubeconfig .kube/config-aws get svc
            kubectl --kubeconfig .kube/config-aws get pods
      - destroy-environment:
          when: on_fail 

  smoketest:
    executor: eks
    steps:
      - checkout    
      - run:
          name: Get LoadBalancer External IPs and checking Availability
          working_directory: deploy
          command: |
            mkdir .kube
            aws eks --region us-west-2 update-kubeconfig --kubeconfig .kube/config-aws --name AWSK8SCluster
            HOST_MAIN=$(kubectl --kubeconfig .kube/config-aws get svc loadbalancer-main --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            HOST_DEV=$(kubectl --kubeconfig .kube/config-aws get svc loadbalancer-dev --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            
            OUTPUT_MAIN=$(curl -s $HOST_MAIN)
            OUTPUT_DEV=$(curl -s $HOST_DEV)

            if [[ -z $(echo $OUTPUT_MAIN) | grep "_dash-loading" ]] 
              then
                echo "Main Endpoint not online"
                exit 1
            elif [[ -z $(echo $OUTPUT_DEV) | grep "_dash-loading" ]]
              then
                echo "Dev Endpoint not online"
                exit 1
            else
              echo "Dev and Main Endpoints are online and good to go :)"
              exit 0
            fi
      #- destroy-environment:
      #    when: on_fail
  cleanup:
    executor: aws
    steps:
      - checkout
      - aws-install-dependencies
      - run:
          name: Get current stack workflow id
          command: |
            export CurrentWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            
            echo "${STACKS[@]}"
            echo "$CurrentWorkflowID"
 
      - run:
          name: Remove old stacks and files
          command: |
            # delete all stacks that aren't tagged with current WorkflowID
            for stack in ${STACKS[@]}; do 
              if [[ ! "$stack" =~ "${CurrentWorkflowID}" ]]
                then
                  echo "Removing Stack $stack"
                  aws cloudformation delete-stack --stack-name "$stack"
                fi
            done
            
workflows:
  default:
    jobs:
      - prepare-env-app
      - lint-app:
          requires: [prepare-env-app]
      - test-static-app:
          requires: [prepare-env-app]
      - scan-app:
          requires: [prepare-env-app]
      - lint-dockerfiles:
          requires: [prepare-env-app]
          filters:
            branches:
              only:
                - main 
      #- build-upload-container:
      #    requires: [lint-dockerfiles]
      #    context:
      #      - dockerhub
      #    filters:
      #      branches:
      #        only:
      #          - main 
      - prep-infrastructure-aws:
          requires: [lint-app, test-static-app, scan-app]
          context:
            - aws_vars
          filters:
            branches:
              only:
                - main 
      - deploy-k8-infrastructure:
          requires: [prep-infrastructure-aws]
          context:
            - aws_vars
          filters:
            branches:
              only:
                - main
      - loadbalancer-update:
          requires: [lint-app, test-static-app, scan-app]
          context:
            - aws_vars
          filters:
            branches:
              only:
                - david_udacity_project_green
                - david_udacity_project_blue
      - smoketest:
          requires: [deploy-k8-infrastructure, loadbalancer-update]
          context:
            - aws_vars
      - cleanup:
          requires: [deploy-k8-infrastructure]
          context:
            - aws_vars
          filters:
            branches:
              only:
                - main
 
