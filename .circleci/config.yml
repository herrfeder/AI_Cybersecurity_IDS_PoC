version: 2.1

executors:
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker: 
      - image: amazon/aws-cli


commands:
  aws-install-dependencies:
    description: install necessary utilities for aws client
    steps:  
      - run:
          name: Install dependencies
          command: yum install -y tar gzip curl

  run-nodejs-scan:
    description: Run generic nodejs source code and dependency scanning
    parameters:
      workingdir:
        default: "."
        type: string
    steps:
      - run:
          name: Update npm 
          working_directory: "<< parameters.workingdir >>"
          command: npm update
      - run:
          name: Scanning the source defined in workingdir against npm audit
          working_directory: "<< parameters.workingdir >>"
          command: npm audit fix --audit-level=critical --force

  run-nodejs-tests:
    description: Run generic nodejs source code testing
    parameters:
      workingdir:
        default: "."
        type: string
    steps:
      - run:
          name: Generic testing of the javascript source with jest defined in working_directory
          working_directory: "<< parameters.workingdir >>"
          command: npm run test --ci


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks using CIRCE_WORKFLOW_ID.
    parameters:
      when:
        type: string
    steps:
     - run:
        name: Check existence of aws cli and install it
        command: sh scripts/check_aws.sh
        when: << parameters.when >>
     - run:
        name: Destroy backend
        command: aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
        when: << parameters.when >>
     - run:
        name: Destroy frontend
        command: |
          aws s3 rm s3://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7} --recursive
          aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
        when: << parameters.when >>
     - run:
        name: Destroy logging
        command: |
          aws cloudformation delete-stack --stack-name "udapeople-logging-${CIRCLE_WORKFLOW_ID:0:7}"
        when: << parameters.when >>
     - run:
        name: Destroy cloudfront
        command: |
          aws cloudformation delete-stack --stack-name "udapeople-cloudfront-${CIRCLE_WORKFLOW_ID:0:7}"
        when: << parameters.when >>




  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
    steps:
      - run:
          name: Check existence of aws cli and install it
          command: sh scripts/check_aws.sh
          when: << parameters.when >>
      - run:
          working_directory: ./backend
          command: |
            export TYPEORM_HOST=$(cat ../.circleci/ansible/backend_ip)
            SUCCESS=$(curl -H "token: 59b634f0-5d93-44a8-8147-ece659e04d52" --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if [[ "$SUCCESS" == "true" ]]
            then
              npm run migrations:revert
            fi
          when: << parameters.when >>            
jobs:

  #######################
  #### C INTEGRATION ####
  #######################

  ###### BUILDING #######

  build-frontend:
    executor: node
    steps:
      - checkout
      - run:
          name: Install frontend dependencies
          working_directory: ./frontend
          command: npm install
      - run:
          name: Build front-end with npm run build
          working_directory: ./frontend
          command: npm run build
      - save_cache:
          paths: 
            - frontend/node_modules
          key: frontend-build-${CIRCLE_WORKFLOW_ID:0:6}

  build-backend:
    executor: node
    steps:
      - checkout
      - run:
          name: Install backend dependencies
          working_directory: ./backend
          command: npm install
      - run:
          name: Build Backend with npm run build
          working_directory: ./backend
          command: npm run build
      - save_cache:
          paths:
            - backend/node_modules
            - backend/dist
          key: backend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules
            - backend/dist


            
workflows:
  default:
    jobs:
      - prepare-env-app
      - lint-app:
          requires: [prepare-env-app]
          context:
            - udacity_clouddevops_capstone
      - test-static-app:
          requires: [prepare-env-app]
          context:
            - udacity_clouddevops_capstone
      - scan-app:
          requires: [prepare-env-app]
          context:
            - udacity_clouddevops_capstone
      - lint-dockerfiles
      - build-upload-container:
          requires: [lint-dockerfiles]
          context:
            - dockerhub 
      - prep-infrastructure-green-aws:
          requires: [lint-app, test-static-app, scan-app]
          context:
            - aws_vars
          filters:
            branches:
              only:
                - main
      - deploy-infrastructure-green:
          requires: [prep-infrastructure-blue-green-aws]
          context:
            - aws_vars
          filters:
            branches:
              only:
                - master
      - deploy-infrastructure-blue:
          requires: [prep-infrastructure-blue-green-aws]
          context:
            - aws_vars
          filters:
            branches:
              only:
                - master
      - test-dynamic-app-blue:
        requires: [deploy-infrastructure-blue]
      - smoke-test:
          requires: [deploy-backend, deploy-01-frontend, deploy-02-frontend]
          context:
            - aws_vars
            - udacity_devops_project3
      - cloudfront-update:
          requires: [smoke-test]
          context:
            - aws_vars
            - udacity_devops_project3
      - cleanup:
          requires: [cloudfront-update]
          context:
            - aws_vars
            - udacity_devops_project3
